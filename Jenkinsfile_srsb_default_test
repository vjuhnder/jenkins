#!groovy
@Library('libs@default')
import com.uhnder.helpers.*
import com.uhnder.pipelines.*
import com.uhnder.shared.*
import com.uhnder.stages.*
import com.uhnder.steps.*


class Stage extends AbstractStage
{
    protected def script
    protected def parallel

    Stage(name, script, parallel=false)
    // (String, Object, Boolean)
    {
        super(name)
        this.script = script
        this.parallel = parallel
    }

    @Override
    void execute()
    {
        //this.script.echo env.STAGE_NAME
        //this.script.echo this.name
        if (this.parallel)
        {
            this.script.stage(this.name)
            {
                this.script.parallel this.steps
            }
        }
        else
        {
            def keys = this.steps.keySet() as List
            for(int i = 0; i < keys.size(); ++i)
            {
                // using this.steps.each{} was only running the first element
                // which might be an error with jenkins
                this.script.stage(keys.get(i))
                {
                    this.steps[keys.get(i)]()
                }
            }
        }
    }
}
// def HIPCHAT = new HipchatSmokeTest(this)


def SRS_REVISION_ID
def SRA_REVISION_ID
def SCC_REVISION_ID
def SBU_SHARED_REVISION_ID
def last_stage_name

properties([
    parameters([
        string( defaultValue: 'default',
                description: 'Specify a changeset (hash) to checkout',
                name: 'SRS_CHANGESET'),
    ]),
    buildDiscarder(logRotator(artifactDaysToKeepStr: '3', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: ''))
])

try
{
    def srs_repo  = new RepoUpdateStep(this, "system-radar-software", "https://bitbucket.org/uhnder/", params.SRS_CHANGESET)
    def scc_repo = new RepoUpdateStep(this, "rcc", "https://bitbucket.org/uhnder/", "default")
    def jenkins_repo = new RepoUpdateStep(this, "jenkins", "https://bitbucket.org/uhnder/", "default")
    def jrt_repo = new RepoUpdateStep(this, "jenkins-regression-tests", "https://bitbucket.org/uhnder/", "default")
    def sra_repo = new RepoUpdateStep(this, "radar-remote-api", "https://bitbucket.org/uhnder/", "default")
    def sbu_s_repo = new RepoUpdateStep(this, "sbu-shared", "https://bitbucket.org/uhnder/", "default")
    def rhal_exp_repo = new RepoUpdateStep(this, "rhal-experimental", "https://bitbucket.org/uhnder/", "default")
    def path
    
    node('master')
    {
        path = sh (
            script: 'python2.7 ../'+env.JOB_NAME+'@script/scripts/path.py',
            returnStdout: true
        ).trim()
    }
    echo path
    
    
    def p = new Pipeline(this, 60)
    p << new Stage('RepoUpdateStep', this)
        .addStep(srs_repo)
    SRS_REVISION_ID = srs_repo.get_rev_id()
    last_stage_name = srs_repo.getName()
    echo last_stage_name
    p << new Stage('RepoUpdateStep', this)
        .addStep(scc_repo)
    SCC_REVISION_ID = scc_repo.get_rev_id() 
    last_stage_name = scc_repo.getName()
    echo last_stage_name
    p << new Stage('RepoUpdateStep', this)
        .addStep(jrt_repo)
    last_stage_name = jrt_repo.getName()
    echo last_stage_name
    p << new Stage('RepoUpdateStep', this)
        .addStep(sra_repo)    
    last_stage_name = sra_repo.getName()
    echo last_stage_name
    SRA_REVISION_ID = sra_repo.get_rev_id()
    p << new Stage('RepoUpdateStep', this)
        .addStep(sbu_s_repo)
    SBUS_REVISION_ID = sbu_s_repo.get_rev_id()
    last_stage_name = sbu_s_repo.getName()
    echo last_stage_name
    def bld_sab = new BuildSrsStep(this,SRS_REVISION_ID, path,"x86_linux", "sabineB", "gtest","")
    p << new Stage('Building Sabine', this)
        .addStep(bld_sab)
    last_stage_name = bld_sab.getName()
    echo last_stage_name
    def bld_sra = new BuildSraStep(this)
    p << new Stage('Building Sabine SRA', this)
        .addStep(bld_sra)
    last_stage_name = bld_sra.getName()
    echo last_stage_name
    def reg_test = new RegressionX86Step(this,'../../../jenkins-regression-tests/regression-suites/sabineB-linux-x86', 'wherever', env.WORKSPACE, "${BUILD_URL}", SRS_REVISION_ID, SCC_REVISION_ID, SBU_SHARED_REVISION_ID, 'revb-x86-smoketest')
    p << new Stage('Regression Testing', this)
        .addStep(reg_test)
    last_stage_name = reg_test.getName()
    echo last_stage_name
    p.execute()

    srs_repo = null 
    scc_repo = null 
    jenkins_repo = null
    jrt_repo = null 
    sra_repo = null 
    sbu_s_repo = null 
    rhal_exp_repo = null 

    //HIPCHAT.send(color: 'GREEN')
}
catch (e)
{
    echo 'The Pipeline failed :('
    // HIPCHAT.send(color: 'RED')
    throw e
}
finally
{
    stage('Build Naming')
    {
        node('master')
        {
            currentBuild.displayName = "#${BUILD_NUMBER}: SRS(${SRS_REVISION_ID})"
            
        }
    }
    if(manager.logContains(".*WIP FAILURES FOUND.*")) {
        manager.buildUnstable()
    }
    script
    {
        manager.addShortText("$last_stage_name \u2705", "black", "lightgreen", "0px", "white")
    }
    
}
